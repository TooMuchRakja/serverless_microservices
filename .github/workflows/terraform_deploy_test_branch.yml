name: Terraform Deployment - test branch modules 2,3 and 4 

on:
  push:
    branches:
      - test

env:
  S3_BUCKET: ${{ secrets.LAMBDA_BUCKET_NAME }}
  TF_BUCKET_NAME: ${{ secrets.TF_BUCKET_NAME }}
  TF_BUCKET_KEY: ${{ secrets.TF_BUCKET_KEY }}
  TF_DYNAMO_TABLE: ${{ secrets.TF_DYNAMO_TABLE }}
  TF_REGION: ${{ secrets.TF_REGION }}

jobs:

  initialize_env:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.TF_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# package lambda poprawne i sprawdzone ##
  package_lambda:
    runs-on: ubuntu-latest
    needs: initialize_env
    strategy:
      matrix:
        include:
          - name: userfunction
            path: ./users/src/users
            type: python
            entry: lambda_function.py
          - name: authorizer_function
            path: ./users/src/authorizer
            type: python
            entry: lambda_function.py

          - name: requirements_layer
            path: ./orders/src/layers/requirements_layer
            type: layer_requirements
          - name: get_order_layer
            path: ./orders/src/layers/get_function_layer
            type: layer_simple

          - name: add_order_function
            path: ./orders/src/lambda_functions/add_order
            type: simple
            entry: lambda_function.py
          - name: delete_order_function
            path: ./orders/src/lambda_functions/delete_order
            type: simple
            entry: lambda_function.py
          - name: edit_order_function
            path: ./orders/src/lambda_functions/edit_order
            type: simple
            entry: lambda_function.py
          - name: get_order_function
            path: ./orders/src/lambda_functions/get_order
            type: simple
            entry: lambda_function.py
          - name: list_order_function
            path: ./orders/src/lambda_functions/list_order
            type: simple
            entry: lambda_function.py

          - name: add_address_function
            path: ./user_profile_service/src/lambda_functions_address/add_address_function
            type: simple
            entry: lambda_function.py
          - name: edit_address_function
            path: ./user_profile_service/src/lambda_functions_address/edit_address_function
            type: simple
            entry: lambda_function.py
          - name: delete_address_function
            path: ./user_profile_service/src/lambda_functions_address/delete_address_function
            type: simple
            entry: lambda_function.py
          - name: list_address_function
            path: ./user_profile_service/src/lambda_functions_address/list_address_function
            type: simple
            entry: lambda_function.py

          - name: list_favourites_function
            path: ./user_profile_service/src/lambda_functions_favourites/list_favourites_function
            type: simple
            entry: lambda_function.py
          - name: add_favourites_function
            path: ./user_profile_service/src/lambda_functions_favourites/add_favourites_function
            type: simple
            entry: lambda_function.py


    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.TF_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Package ${{ matrix.name }}
        working-directory: ${{ matrix.path }}
        run: |
          case "${{ matrix.type }}" in
            python)
              python -m venv venv
              source venv/bin/activate
              pip install -r requirements.txt

              ZIP_PATH="${{ github.workspace }}/${{ matrix.name }}.zip"

              cd venv/lib/python3.*/site-packages
              zip -r9 "$ZIP_PATH" . || exit 1

              cd "$OLDPWD"
              zip -g "$ZIP_PATH" ${{ matrix.entry }} || exit 1
              ;;

            layer_requirements)
              mkdir -p python
              python -m venv venv
              source venv/bin/activate
              pip install -r requirements.txt -t python/
              zip -r9 "${{ github.workspace }}/${{ matrix.name }}.zip" python
              ;;

            layer_simple)
              zip -r9 "${{ github.workspace }}/${{ matrix.name }}.zip" python
              ;;

            simple)
              zip -r9 "${{ github.workspace }}/${{ matrix.name }}.zip" ${{ matrix.entry }}
              ;;

            *)
              echo "Unsupported type: ${{ matrix.type }}"
              exit 1
              ;;
          esac

          if aws s3 ls "s3://$S3_BUCKET/${{ matrix.name }}.zip" > /dev/null 2>&1; then
            echo "Lambda package ${{ matrix.name }}.zip already exists in S3. Skipping upload."
          else
            aws s3 cp "${{ github.workspace }}/${{ matrix.name }}.zip" s3://$S3_BUCKET/
            rm "${{ github.workspace }}/${{ matrix.name }}.zip"
          fi
          
  deploy_and_test:
    runs-on: ubuntu-latest
    needs: package_lambda
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.TF_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Generate backend config
        run: |
          cat <<EOF > backend.conf.hcl
          bucket         = "${TF_BUCKET_NAME}"
          key            = "${TF_BUCKET_KEY}"
          region         = "${TF_REGION}"
          dynamodb_table = "${TF_DYNAMO_TABLE}"
          encrypt        = true
          EOF

      - name: Terraform Init
        run: terraform init -backend-config=backend.conf.hcl
        working-directory: .

      - name: Terraform Validate
        run: terraform validate
        working-directory: .

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: .

  # Odkomentuj gdy będziesz gotowy do faktycznego deployu
    #  - name: Terraform Apply
    #    id: apply
    #    run: terraform apply -auto-approve tfplan
    #    working-directory: .



    #  - name: Wait for resources to establish connections
    #    run: sleep 10

    # ---- Testy modułu użytkowników ----
    #  - name: Set up test environment for users module
    #    run: |
    #      python -m venv test
    #      source test/bin/activate
    #      pip install -r users/tests/requirements.txt
    #    shell: bash

    #  - name: Run Unit Tests for users module
    #    run: |
    #      source test/bin/activate
    #      PYTHONPATH=users/src python3 -m pytest users/tests/unit -v
    #    shell: bash

    #  - name: Run Integration Tests for users module
    #    run: |
    #      source test/bin/activate
    #      PYTHONPATH=users/src python3 -m pytest users/tests/integration -v
    #    shell: bash
# odkomentuje jak zdebuguje testy dla integration 
    #  - name: Set up test environment for orders module
    #    run: |
    #      python -m venv test_orders
    #      source test_orders/bin/activate
    #      pip install -r orders/tests/requirements.txt
    #    shell: bash

    #  - name: Run Integration Tests for orders module
    #    run: |
    #      source test_orders/bin/activate
    #      PYTHONPATH=orders/src python3 -m pytest orders/tests/integration -v
    #    shell: bash


    # - name: Set up test environment for user profile address module
    #    run: |
    #      python -m venv test_address
    #      source test_address/bin/activate
    #      pip install -r user_profile_service/tests/requirements.txt
    #    shell: bash

    #  - name: Run Integration Tests  user profile address module
    #    run: |
    #      source test_address/bin/activate
    #      PYTHONPATH=user_profile_service/src/lambda_functions_address python3 -m pytest user_profile_service/tests/integration/addresses -v
    #    shell: bash

    # - name: Set up test environment for favourites 
    #    run: |
    #      python -m venv test_address
    #      source test_address/bin/activate
    #      pip install -r user_profile_service/tests/requirements.txt
    #    shell: bash

    #  - name: Run Integration Tests for favourites
    #    run: |
    #      source test_address/bin/activate
    #      PYTHONPATH=user_profile_service/src/lambda_functions_favourites python3 -m pytest user_profile_service/tests/integration/favourites -v
    #    shell: bash


# Rollback procedure in case of failure #
#  rollback:
#    runs-on: ubuntu-latest
#    needs: deploy_and_test
#    if: ${{ failure() }}
#    steps:
#      - name: Checkout repo
#        uses: actions/checkout@v3

#      - name: Set up AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-region: ${{ env.TF_REGION }}
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#      - name: Set up Terraform
#        uses: hashicorp/setup-terraform@v3

#      - name: Generate backend config
#        run: |
#          cat <<EOF > backend.conf.hcl 
#          bucket         = "${TF_BUCKET_NAME}"
#          key            = "${TF_BUCKET_KEY}"
#          region         = "${TF_REGION}"
#          dynamodb_table = "${TF_DYNAMO_TABLE}"
#          encrypt        = true
#          EOF

#      - name: Terraform Init
#        run: terraform init -backend-config=backend.conf.hcl 
#        working-directory: .

#      - name: Rollback - Terraform Destroy
#        run: terraform destroy -auto-approve
#        working-directory: .


