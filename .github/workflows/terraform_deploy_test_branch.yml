name: Terraform Deployment - test branch modules 2 and 3

on:
  push:
    branches:
      - test

env:
  S3_BUCKET: ${{ secrets.LAMBDA_BUCKET_NAME }}
  TF_BUCKET_NAME: ${{ secrets.TF_BUCKET_NAME }}
  TF_BUCKET_KEY: ${{ secrets.TF_BUCKET_KEY }}
  TF_DYNAMO_TABLE: ${{ secrets.TF_DYNAMO_TABLE }}
  TF_REGION: ${{ secrets.TF_REGION }}

jobs:

  initialize_env:
    runs-on: ubuntu-latest
    outputs:
      done: ready
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.TF_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# -------------------------------
# PRZYK≈ÅADOWY JOB DLA USER FUNCTION
# -------------------------------
  name: Package Lambda Functions

on:
  push:
    branches:
      - main

jobs:
  package_lambda:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          # USERS - TYPY DLA FUNKCJI USERS 
          - name: userfunction
            path: ./users/src/users
            type: python
            entry: lambda_function.py
          - name: authorizer_function
            path: ./users/src/authorizer
            type: python
            entry: lambda_function.py

          # ORDERS: TYPY DLA ORDERS LAYERS
          - name: requirements_layer
            path: ./orders/src/layers/requirements_layer
            type: layer_requirements
          - name: get_order_layer
            path: ./orders/src/layers/get_function_layer
            type: layer_simple

          # ORDERS: TYP SIMPLE DLA POJEDYNCZYCH FUKNCJI 
          - name: add_order_function
            path: ./orders/src/lambda_functions/add_order
            type: simple
            entry: lambda_function.py
          - name: delete_order_function
            path: ./orders/src/lambda_functions/delete_order
            type: simple
            entry: lambda_function.py
          - name: edit_order_function
            path: ./orders/src/lambda_functions/edit_order
            type: simple
            entry: lambda_function.py
          - name: get_order_function
            path: ./orders/src/lambda_functions/get_order
            type: simple
            entry: lambda_function.py
          - name: list_order_function
            path: ./orders/src/lambda_functions/list_order
            type: simple
            entry: lambda_function.py

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.TF_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Package ${{ matrix.name }}
        working-directory: ${{ matrix.path }}
        run: |
          case "${{ matrix.type }}" in

            python)
              python -m venv venv
              source venv/bin/activate
              pip install -r requirements.txt
              cd venv/lib/python3.*/site-packages
              zip -r9 ../../../../${{ matrix.name }}.zip .
              cd ../../../../
              zip -g ${{ matrix.name }}.zip ${{ matrix.entry }}
              ;;

            layer_requirements)
              python -m venv venv
              source venv/bin/activate
              pip install -r requirements.txt -t python/
              zip -r9 ../../../../${{ matrix.name }}.zip python
              ;;

            layer_simple)
              zip -r9 ../../../../${{ matrix.name }}.zip python
              ;;

            simple)
              zip -r9 ../../../../${{ matrix.name }}.zip ${{ matrix.entry }}
              ;;

            *)
              echo "Unsupported type: ${{ matrix.type }}"
              exit 1
              ;;
          esac

          aws s3 cp ../../../../${{ matrix.name }}.zip s3://$S3_BUCKET/
          rm ../../../../${{ matrix.name }}.zip

  pack_functions:
    needs:
      - pack_user_function
      - pack_authorizer
      - pack_order_requirements_layer
      - pack_get_function_layer
      - pack_add_order
      - pack_delete_order
      - pack_edit_order
      - pack_get_order
      - pack_list_order
    runs-on: ubuntu-latest
    steps:
      - name: All functions packaged
        run: echo "All Lambda functions and layers are packaged"


  deploy_resources:
    runs-on: ubuntu-latest
    needs: pack_functions
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Generate backend config
        run: |
          cat <<EOF > backend.conf.hcl 
          bucket         = "${TF_BUCKET_NAME}"
          key            = "${TF_BUCKET_KEY}"
          region         = "${TF_REGION}"
          dynamodb_table = "${TF_DYNAMO_TABLE}"
          encrypt        = true
          EOF
          
      - name: Terraform Init
        run: terraform init -backend-config=backend.conf.hcl 
        working-directory: .

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: .

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan
        working-directory: .

      - name: Wait for resources to establish connections
        run: sleep 60

  test_users:
    runs-on: ubuntu-latest
    needs: deploy_resources
    steps:
      - name: Set up test environment for users module
        run: |
          python -m venv test
          source test/bin/activate
          pip install -r ./tests/requirements.txt
        shell: bash

      - name: Run Unit Tests
        id: unit_tests
        run: |
          source test/bin/activate
          PYTHONPATH=src python3 -m pytest tests/unit -v
        shell: bash

      - name: Run Integration Tests
        id: integration_tests
        run: |
          source test/bin/activate
          python3 -m pytest tests/integration -v
        shell: bash

      
  test_orders:
    runs-on: ubuntu-latest
    needs: [deploy_resources, test_users]
    steps:
      - name: Set up test environment for orders module 
        run: |
          python -m venv test
          source venv/bin/activate
          pip install -r ./orders/tests/requirements.txt
        shell: bash

      - name: Run Integration Tests for orders module
        id: integration_tests
        run: |
          source venv/bin/activate
          python3 -m pytest tests/integration -v
        shell: bash


  rollback:
    runs-on: ubuntu-latest
    needs: deploy_resources
    if: ${{ failure() }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.TF_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Generate backend config
        run: |
          cat <<EOF > backend.conf.hcl 
          bucket         = "${TF_BUCKET_NAME}"
          key            = "${TF_BUCKET_KEY}"
          region         = "${TF_REGION}"
          dynamodb_table = "${TF_DYNAMO_TABLE}"
          encrypt        = true
          EOF

      - name: Terraform Init
        run: terraform init -backend-config=backend.conf.hcl 
        working-directory: .

      - name: Rollback - Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: .

      - name: Rollback - Delete Lambda ZIPs from S3
        run: |
          aws s3 rm s3://$S3_BUCKET/authorizer_function.zip || true
          aws s3 rm s3://$S3_BUCKET/userfunction.zip || true
          aws s3 rm s3://$S3_BUCKET/requirements_layer.zip || true
          aws s3 rm s3://$S3_BUCKET/get_order_layer.zip|| true
          aws s3 rm s3://$S3_BUCKET/edit_order_function.zip || true
          aws s3 rm s3://$S3_BUCKET/list_order_function.zip || true
          aws s3 rm s3://$S3_BUCKET/get_order_function.zip || true
          aws s3 rm s3://$S3_BUCKET/delete_order_function.zip || true
