# przerobione na główny plik dla całego projektu - zkałdam że trzeba będzie pozmieniać niektóre ścieżki 
name: Terraform Deployment

on:
  push:
    branches:
      - main

env:
  S3_BUCKET: ${{ secrets.LAMBDA_BUCKET_NAME }}
  TF_BUCKET_NAME: ${{ secrets.TF_BUCKET_NAME }}
  TF_BUCKET_KEY: ${{ secrets.TF_BUCKET_KEY }}
  TF_DYNAMO_TABLE: ${{ secrets.TF_DYNAMO_TABLE }}
  TF_REGION: ${{ secrets.TF_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.TF_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install zip utility
        run: sudo apt-get install zip -y

      - name: Package Lambda authorizer_function
        working-directory: src/authorizer
        run: |
          python -m venv test
          source test/bin/activate
          pip install -r requirements.txt
          # Idziemy do folderu z zależnościami i pakujemy wszystko
          cd test/lib/python3.*/site-packages
          zip -r9 ../../../../authorizer_function.zip .
          cd ../../../../
          # Do zipa dopakowujemy kod funkcji
          zip -g authorizer_function.zip lambda_function.py
# funkcja wyżej nie pakuje zależności 
      - name: Package Lambda userfunction
        working-directory: src/users
        run: |
          python -m venv test
          source test/bin/activate
          pip install -r requirements.txt
          cd test/lib/python3.*/site-packages
          zip -r9 ../../../../userfunction.zip .
          cd ../../../../
          zip -g userfunction.zip lambda_function.py

      - name: Upload authorizer function to S3
        working-directory: src/authorizer
        run: |
          aws s3 cp authorizer_function.zip s3://$S3_BUCKET/
      
      - name: Upload user function to S3
        working-directory: src/users
        run: |
          aws s3 cp userfunction.zip s3://$S3_BUCKET/

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Generate backend config
        run: |
          cat <<EOF > backend.conf.hcl 
          bucket         = "${TF_BUCKET_NAME}"
          key            = "${TF_BUCKET_KEY}"
          region         = "${TF_REGION}"
          dynamodb_table = "${TF_DYNAMO_TABLE}"
          encrypt        = true
          EOF

          

      - name: Terraform Init
        run: terraform init -backend-config=backend.conf.hcl 
        working-directory: .

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: .

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan
        working-directory: .

      - name: Wait for resources to establish connections
        run: sleep 30
 
      - name: Set up test environment
        run: |
          python -m venv test
          source test/bin/activate
          pip install -r ./tests/requirements.txt
        shell: bash

      - name: Run Unit Tests
        id: unit_tests
        run: |
          source test/bin/activate
          PYTHONPATH=src python3 -m pytest tests/unit -v
        shell: bash

      - name: Run Integration Tests
        id: integration_tests
        run: |
          source test/bin/activate
          python3 -m pytest tests/integration -v
        shell: bash

  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ failure() }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.TF_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Generate backend config
        run: |
          cat <<EOF > backend.conf.hcl 
          bucket         = "${TF_BUCKET_NAME}"
          key            = "${TF_BUCKET_KEY}"
          region         = "${TF_REGION}"
          dynamodb_table = "${TF_DYNAMO_TABLE}"
          encrypt        = true
          EOF

      - name: Terraform Init
        run: terraform init -backend-config=backend.conf.hcl 
        working-directory: .

      - name: Rollback - Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: .

      - name: Rollback - Delete Lambda ZIPs from S3
        run: |
          aws s3 rm s3://$S3_BUCKET/authorizer_function.zip || true
          aws s3 rm s3://$S3_BUCKET/userfunction.zip || true
